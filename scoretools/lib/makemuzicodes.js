// Generated by CoffeeScript 1.11.1
(function() {
  var BITS_PER_FLAGVAR, add_actions, add_delayed_mc, add_delayed_midi, add_delayed_visual, add_immediate_actions, cell, cellid, channel, climbview, codetitles, config, configdir, configfile, content_url, control, ct, cuesingle, data, defaultprojection, delayid, e, effects, errors, ex, exinfile, exoutfile, fragment, fragments, fs, getCodeIds, get_marker, guid, i, i1, id, ids, j, j1, k, k1, l, l1, label, labels, len, len1, len10, len2, len3, len4, len5, len6, len7, len8, len9, m, marker, markernames, maxdelay, maxrow, mc, mcs, meiids, mi, mindelay, name, numflagvars, numstages, o, p, path, prefix, prefixes, q, r, readmeiids, readrow, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, relpath, s, set_stage, sfi, sheet, stage, stages, sweathers, t, title, u, unused, v, viewconfig, viewgen, viewoutfile, w, weather_urls, weatherdelay, weathers, wi, workbook, x, xlfile, xlsx, y, yaml, z;

  if (process.argv.length !== 2 && process.argv.length !== 3) {
    console.log('Usage: node makemuzicodes [<config.yaml>]');
    process.exit(-1);
  }

  yaml = require('js-yaml');

  fs = require('fs');

  path = require('path');

  getCodeIds = (require('./meiutils')).getCodeIds;

  climbview = require('./climbview');

  configfile = (ref = process.argv[2]) != null ? ref : 'config.yml';

  configfile = path.normalize(configfile);

  configdir = path.isAbsolute(configfile) ? path.dirname(configfile) : path.join(process.cwd(), path.dirname(configfile));

  console.log('read config ' + configfile + ' from ' + configdir);

  config = {};

  try {
    config = yaml.safeLoad(fs.readFileSync(configfile, 'utf8'));
    console.log(config);
  } catch (error) {
    e = error;
    console.log('error reading config ' + configfile + ': ' + e.message);
    process.exit(-2);
  }

  relpath = function(p, base) {
    if (path.isAbsolute(p)) {
      return p;
    } else {
      return path.normalize(path.join(base, p));
    }
  };

  xlfile = relpath(config.spreadsheet, configdir);

  exinfile = relpath(config.experiencein, configdir);

  exoutfile = relpath(config.experienceout, configdir);

  viewoutfile = relpath(config.climbviewout, configdir);

  viewgen = climbview.generator('Climbview ' + viewoutfile + ' from ' + configfile, config);

  xlsx = require('xlsx');

  fs = require('fs');

  console.log('read template experience ' + exinfile);

  ex = JSON.parse(fs.readFileSync(exinfile, {
    encoding: 'utf8'
  }));

  console.log('read spreadsheet ' + xlfile);

  workbook = xlsx.readFile(xlfile);

  sheet = workbook.Sheets[workbook.SheetNames[0]];

  cellid = function(c, r) {
    var p, rec;
    p = String(r + 1);
    rec = function(c) {
      p = (String.fromCharCode('A'.charCodeAt(0) + (c % 26))) + p;
      c = Math.floor(c / 26);
      if (c !== 0) {
        return rec(c - 1);
      }
    };
    rec(c);
    return p;
  };

  readrow = function(r) {
    var c, data, head, i, key, prefix, ref1, ref2, ref3, ref4, val;
    data = {};
    prefix = '';
    for (c = i = 0; i <= 1000; c = ++i) {
      head = (ref1 = sheet[cellid(c, 0)]) != null ? (ref2 = ref1.v) != null ? ref2.toLowerCase() : void 0 : void 0;
      if (head == null) {
        break;
      }
      if ((head.indexOf(':')) >= 0) {
        prefix = (head.substring(0, head.indexOf(':'))) + '_';
        head = head.substring((head.indexOf(':')) + 1);
      }
      key = prefix + head;
      val = (ref3 = sheet[cellid(c, r)]) != null ? ref3.v : void 0;
      if (val != null) {
        data[key] = (ref4 = sheet[cellid(c, r)]) != null ? ref4.v : void 0;
      }
    }
    return data;
  };

  if (ex.markers == null) {
    ex.markers = [];
  }

  ex.controls = [];

  if (ex.parameters == null) {
    ex.parameters = {};
  }

  markernames = [];

  ref1 = ex.markers;
  for (i = 0, len = ref1.length; i < len; i++) {
    marker = ref1[i];
    if (marker.title && (markernames.indexOf(marker.title)) >= 0) {
      console.log('WARNING: marker "' + marker.title + '" defined multiple times');
    }
    marker.actions = [];
    delete marker.action;
    delete marker.precondition;
    marker.poststate = {};
    marker.precondition = '';
  }

  ex.parameters.initstate = {
    stage: '""',
    cued: false,
    meldmei: '""',
    meldcollection: '""',
    meldannostate: '""',
    meldnextmeifile: 'null',
    mcserver: JSON.stringify((ref2 = config.mcserver) != null ? ref2 : 'http://localhost:3000/input'),
    meldmeiuri: JSON.stringify((ref3 = config.meldmeiuri) != null ? ref3 : 'http://localhost:3000/content/'),
    contenturi: JSON.stringify((ref4 = config.contenturi) != null ? ref4 : 'http://localhost:3000/content/'),
    performanceid: '""',
    performancename: '""',
    stagecodeflags: 0
  };

  if (config.performances) {
    ref5 = config.performances;
    for (title in ref5) {
      guid = ref5[title];
      ex.controls.push({
        inputUrl: 'button:Perform ' + title,
        actions: [],
        poststate: {
          performanceid: JSON.stringify(guid),
          performancename: JSON.stringify(title)
        }
      });
      ex.controls.push({
        inputUrl: 'post:performanceid',
        actions: [],
        poststate: {
          performanceid: 'params.performanceid',
          performancename: 'params.performancename'
        }
      });
    }
  }

  ex.controls.push({
    inputUrl: 'button:Stop app',
    actions: [
      {
        url: 'emit:vStop:mobileapp:{{performanceid}}'
      }
    ]
  });

  defaultprojection = String((ref6 = config.defaultprojection) != null ? ref6 : '');

  if (defaultprojection === '') {
    console.log("WARNING: defaultprojection is not defined in " + configfile);
  } else {
    if (((ref7 = (function() {
      var j, len1, ref8, ref9, results;
      ref9 = (ref8 = ex.projections) != null ? ref8 : [];
      results = [];
      for (j = 0, len1 = ref9.length; j < len1; j++) {
        p = ref9[j];
        if (p.id === defaultprojection) {
          results.push(p);
        }
      }
      return results;
    })()) != null ? ref7 : []).length === 0) {
      console.log('WARNING: cannot find default projection "' + defaultprojection + '"');
    } else {
      console.log('using default projection "' + defaultprojection + '"');
    }
  }

  cuesingle = (ref8 = config.cuesingle) != null ? ref8 : false;

  stages = {};

  prefixes = ['auto_', 'mc1_', 'mc2_', 'mc3_', 'mc4_', 'mc5_', 'default_'];

  mcs = ['mc1_', 'mc2_', 'mc3_'];

  weathers = ['no', 'wind', 'rain', 'snow', 'sun', 'storm'];

  effects = '[';

  weather_urls = '[';

  sweathers = '[';

  for (wi = j = 0, len1 = weathers.length; j < len1; wi = ++j) {
    w = weathers[wi];
    if (wi > 0) {
      sweathers += ',';
    }
    sweathers += JSON.stringify(w);
    if (config[w + '_effect'] == null) {
      console.log('ERROR: ' + w + '_effect not defined in ' + configfile);
    }
    if (wi > 0) {
      effects += ',';
    }
    effects += JSON.stringify(config[w + '_effect']);
    if (config[w + '_url'] == null) {
      console.log('ERROR: ' + w + '_url not defined in ' + configfile);
    }
    if (wi > 0) {
      weather_urls += ',';
    }
    weather_urls += JSON.stringify(config[w + '_url']);
    control = {
      inputUrl: 'delay:' + w,
      actions: []
    };
    control.actions.push({
      channel: '',
      url: config[w + '_effect']
    });
    control.actions.push({
      channel: 'v.weather',
      url: config[w + '_url']
    });
    ex.controls.push(control);
  }

  effects += ']';

  weather_urls += ']';

  sweathers += ']';

  ex.parameters.initstate.effects = effects;

  ex.parameters.initstate.weather_urls = weather_urls;

  ex.parameters.initstate.weathers = sweathers;

  mindelay = Number((ref9 = config.weatherdelaymin) != null ? ref9 : 0);

  maxdelay = Number((ref10 = config.weatherdelaymax) != null ? ref10 : 0);

  weatherdelay = '' + mindelay + '+Math.random()*' + (maxdelay - mindelay);

  if (maxdelay < mindelay) {
    maxdelay = mindelay;
  }

  content_url = function(url) {
    if ((url.indexOf(':')) < 0 && (url.substring(0, 1)) !== '/') {
      return '{{contenturi}}' + url;
    } else {
      return url;
    }
  };

  delayid = 0;

  numstages = 0;

  BITS_PER_FLAGVAR = 31;

  numflagvars = 0;

  add_actions = function(control, prefix, data, meldload) {
    var delay, delaycontrol, err, vdelta;
    add_immediate_actions(control, prefix, data, meldload);
    if (data[prefix + 'delay'] != null) {
      try {
        delay = Number(data[prefix + 'delay']);
        vdelta = data[prefix + 'vdelta'] != null ? Number(data[prefix + 'vdelta']) : 0;
        delaycontrol = {
          inputUrl: 'delay:' + (delayid++) + ':' + data.stage + ':' + prefix,
          actions: []
        };
        ex.controls.push(delaycontrol);
        add_delayed_midi(delaycontrol, prefix, data, meldload);
        if (vdelta === 0) {
          add_delayed_visual(delaycontrol, prefix, data, meldload);
        }
        control.actions.push({
          url: delaycontrol.inputUrl,
          delay: delay
        });
        if (vdelta !== 0) {
          delay += vdelta;
          if (delay < 0) {
            console.log('Warning: negative delay for ' + prefix + ' visuals in ' + data.stage);
            delay = 0;
          }
          delaycontrol = {
            inputUrl: 'delay:' + (delayid++) + ':' + data.stage + ':v' + prefix,
            actions: []
          };
          ex.controls.push(delaycontrol);
          add_delayed_visual(delaycontrol, prefix, data, meldload);
          control.actions.push({
            url: delaycontrol.inputUrl,
            delay: delay
          });
        }
      } catch (error) {
        err = error;
        console.log('ERROR: adding delay of ' + data[prefix + 'delay'] + ' (vdelta ' + data[prefix + 'vdelta'] + ') for ' + data.stage + ' ' + prefix + ' (' + err.message + ')');
      }
    } else {
      add_delayed_visual(control, prefix, data, meldload);
      add_delayed_midi(control, prefix, data, meldload);
    }
    if (data[prefix + 'v.mc.delay'] != null) {
      try {
        delay = Number(data[prefix + 'v.mc.delay']);
        delaycontrol = {
          inputUrl: 'delay:' + (delayid++) + ':' + data.stage + ':' + prefix,
          actions: []
        };
        ex.controls.push(delaycontrol);
        add_delayed_mc(delaycontrol, prefix, data, meldload);
        return control.actions.push({
          url: delaycontrol.inputUrl,
          delay: delay
        });
      } catch (error) {
        err = error;
        return console.log('ERROR: adding delay of ' + data[prefix + 'v.mc.delay'] + ' for ' + data.stage + ' ' + prefix + ' (' + err.message + ')');
      }
    } else {
      return add_delayed_mc(control, prefix, data, meldload);
    }
  };

  add_immediate_actions = function(control, prefix, data, meldload) {
    var altstage, channel, l, len2, len3, m, meldprefix, msg, msgs, nextexp, nextstage, nexturi, ns, o, q, ref11, ref12, ref13, sfbi, sfi, stageflags, stagetest;
    control.actions.push({
      channel: '',
      url: content_url(data[prefix + 'monitor'])
    });
    ref11 = ['v.background'];
    for (l = 0, len2 = ref11.length; l < len2; l++) {
      channel = ref11[l];
      if (data[prefix + channel] != null) {
        viewgen.add(data[prefix + channel]);
        control.actions.push({
          channel: channel,
          url: content_url(data[prefix + channel])
        });
      }
    }
    if (data[prefix + 'midi'] != null) {
      msgs = data[prefix + 'midi'].split(',');
      for (m = 0, len3 = msgs.length; m < len3; m++) {
        msg = msgs[m];
        msg = msg.trim();
        if (msg.length > 0) {
          control.actions.push({
            channel: '',
            url: 'data:text/x-midi-hex,' + msg
          });
        }
      }
    }
    if (control.poststate == null) {
      control.poststate = {};
    }
    if (control.precondition == null) {
      control.precondition = '';
    }
    if (data[prefix + 'cue'] != null) {
      nextstage = data[prefix + 'cue'];
      altstage = null;
      stagetest = 'true';
      if (stages[nextstage] == null) {
        console.log('ERROR: stage ' + data.stage + ' ' + prefix + ' cue to unknown stage: ' + nextstage);
      }
      if ((data.next != null) && (stages[data.next] == null)) {
        console.log('ERROR: stage ' + data.stage + ' has unknown safe next stage ' + data.next);
      }
      if ((nextstage != null) && (data.next != null) && (stages[nextstage] != null) && (stages[data.next] != null) && nextstage !== data.next) {
        stageflags = [];
        for (sfi = o = 1, ref12 = numflagvars; 1 <= ref12 ? o <= ref12 : o >= ref12; sfi = 1 <= ref12 ? ++o : --o) {
          stageflags[sfi - 1] = 0;
        }
        ns = nextstage;
        while ((ns != null) && (stages[ns] != null)) {
          sfi = Math.floor(stages[ns]._index / BITS_PER_FLAGVAR);
          sfbi = stages[ns]._index % BITS_PER_FLAGVAR;
          if ((stageflags[sfi] & (1 << sfbi)) !== 0) {
            console.log('ERROR: safe route from ' + nextstage + ' has a loop at ' + ns);
            break;
          }
          stageflags[sfi] = stageflags[sfi] | (1 << sfbi);
          ns = stages[ns].next;
        }
        altstage = data.next;
        stagetest = '';
        for (sfi = q = 1, ref13 = numflagvars; 1 <= ref13 ? q <= ref13 : q >= ref13; sfi = 1 <= ref13 ? ++q : --q) {
          if (stagetest.length > 0) {
            stagetest += ' && ';
          }
          stagetest += '(stageflags' + (sfi - 1) + ' & ' + stageflags[sfi - 1] + ')==0';
        }
      }
      if ((cuesingle && prefix !== 'auto_' && control.precondition.indexOf('cued')) < 0) {
        control.precondition = '!cued' + (control.precondition.length === 0 ? '' : ' && (') + control.precondition + (control.precondition.length === 0 ? '' : ')');
      }
      if (stages[nextstage] != null) {
        nexturi = encodeURIComponent(stages[nextstage].meifile);
        nextexp = JSON.stringify(stages[nextstage].meifile);
        if (altstage !== null && (stages[altstage] != null)) {
          nexturi = '{{ ' + stagetest + ' ? ' + (JSON.stringify(nexturi)) + ' : ' + (JSON.stringify(encodeURIComponent(stages[data.next].meifile))) + ' }}';
          nextexp = stagetest + ' ? ' + nextexp + ' : ' + (JSON.stringify(stages[data.next].meifile));
        }
        meldprefix = meldload ? 'params.' : '';
        control.actions.push({
          url: '{{' + meldprefix + 'meldcollection}}',
          post: true,
          contentType: 'application/json',
          body: '{"oa:hasTarget":["{{' + meldprefix + 'meldannostate}}"], "oa:hasBody":[{"@type":"meldterm:CreateNextCollection", "resourcesToQueue":["{{meldmeiuri}}' + nexturi + '"], "annotationsToQueue":[]}] }'
        });
        control.poststate.meldnextmeifile = nextexp;
        return control.poststate.cued = "true";
      }
    }
  };

  add_delayed_visual = function(control, prefix, data, meldload) {
    var channel, l, len2, ref11, results;
    ref11 = ['v.animate'];
    results = [];
    for (l = 0, len2 = ref11.length; l < len2; l++) {
      channel = ref11[l];
      if (data[prefix + channel] != null) {
        viewgen.add(data[prefix + channel]);
        results.push(control.actions.push({
          channel: channel,
          url: content_url(data[prefix + channel])
        }));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  add_delayed_mc = function(control, prefix, data, meldload) {
    var channel, l, len2, ref11;
    ref11 = ['v.mc'];
    for (l = 0, len2 = ref11.length; l < len2; l++) {
      channel = ref11[l];
      if (data[prefix + channel] != null) {
        if (channel === 'v.mc' && String(data[prefix + channel]) === '1') {
          if (config.defaultmuzicodeurl != null) {
            control.actions.push({
              channel: channel,
              url: content_url(config.defaultmuzicodeurl)
            });
          } else {
            console.log('ERROR: use of undefined defaultmuzicodeurl in ' + prefix + channel);
          }
        } else if (!(channel === 'v.background' && (config.forcebackgroundurl != null))) {
          viewgen.add(data[prefix + channel]);
          control.actions.push({
            channel: channel,
            url: content_url(data[prefix + channel])
          });
        }
      }
    }
    if (data[prefix + 'app'] != null) {
      return control.actions.push({
        url: 'emit:vEvent:mobileapp:{{performanceid}}:' + data[prefix + 'app']
      });
    }
  };

  add_delayed_midi = function(control, prefix, data, meldload) {
    var l, len2, msg, msgs, results;
    if (data[prefix + 'midi2'] != null) {
      msgs = data[prefix + 'midi2'].split(',');
      results = [];
      for (l = 0, len2 = msgs.length; l < len2; l++) {
        msg = msgs[l];
        msg = msg.trim();
        if (msg.length > 0) {
          results.push(control.actions.push({
            channel: '',
            url: 'data:text/x-midi-hex,' + msg
          }));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  set_stage = function(control, data) {
    var l, len2, m, n, ni, ref11, sfbi, sfi, ws;
    if (control.poststate == null) {
      control.poststate = {};
    }
    control.poststate.cued = "false";
    control.poststate.stage = JSON.stringify(data.stage);
    control.poststate.stagecodeflags = '0';
    sfi = Math.floor(data._index / BITS_PER_FLAGVAR);
    sfbi = data._index % BITS_PER_FLAGVAR;
    control.poststate['stageflags' + sfi] = 'stageflags' + sfi + ' | ' + (1 << sfbi);
    ws = [];
    for (wi = l = 0, len2 = weathers.length; l < len2; wi = ++l) {
      w = weathers[wi];
      if ((data[w + '_effect'] != null) && data[w + '_effect'].length > 0) {
        if (data[w + '_effect'].substring(0, 1).toLowerCase() === 'y') {
          ws.push(wi);
        } else if (data[w + '_effect'].substring(0, 1).toLowerCase() !== 'n') {
          n = parseInt(data[w + '_effect']);
          if (isNaN(n)) {
            console.log('WARNING: error in weather ' + w + ' value ' + data[w + '_effect'] + ' (should be Y, N or count)');
          }
          if (!(isNaN(n)) && n > 0) {
            for (ni = m = 1, ref11 = n; 1 <= ref11 ? m <= ref11 : m >= ref11; ni = 1 <= ref11 ? ++m : --m) {
              ws.push(wi);
            }
          }
        }
      }
    }
    if (ws.length > 0) {
      return control.actions.push({
        url: 'delay:{{weathers[([' + (ws.join(',')) + '])[Math.floor(Math.random()*' + ws.length + ')]]}}',
        delay: weatherdelay
      });
    }
  };

  get_marker = function(ex, markertitle, optdescription) {
    var l, len2, markers, ref11;
    markers = (ref11 = (function() {
      var l, len2, ref12, results;
      ref12 = ex.markers;
      results = [];
      for (l = 0, len2 = ref12.length; l < len2; l++) {
        marker = ref12[l];
        if (marker.title === markertitle) {
          results.push(marker);
        }
      }
      return results;
    })()) != null ? ref11 : [];
    for (l = 0, len2 = markers.length; l < len2; l++) {
      marker = markers[l];
      if (marker.actions.length === 0 && marker.precondition.length === 0) {
        return marker;
      }
    }
    if (markers.length === 0) {
      console.log('WARNING: marker  "' + markertitle + '" undefined - adding to output');
      marker = {
        title: markertitle,
        description: optdescription,
        poststate: {},
        actions: [],
        precondition: ''
      };
      ex.markers.push(marker);
      return marker;
    }
    console.log('NOTE: marker "' + markertitle + '" used more than once; cloning');
    marker = JSON.parse(JSON.stringify(markers[0]));
    marker.poststate = {};
    marker.actions = [];
    marker.precondition = '';
    ex.markers.push(marker);
    return marker;
  };

  maxrow = 1;

  for (r = l = 1; l <= 1000; r = ++l) {
    cell = sheet[cellid(0, r)];
    if (cell === void 0) {
      break;
    }
    data = readrow(r);
    if (data.stage == null) {
      console.log('ignore row without stage name: ' + (JSON.stringify(data)));
      continue;
    }
    console.log('stage ' + data.stage);
    maxrow = r;
    if (stages[data.stage] !== void 0) {
      console.log('ERROR: more than one entry found for stage ' + data.stage);
    }
    data._index = numstages;
    numstages++;
    stages[data.stage] = data;
    for (m = 0, len2 = prefixes.length; m < len2; m++) {
      prefix = prefixes[m];
      if (data[name = prefix + 'monitor'] == null) {
        data[name] = 'data:text/plain,stage ' + data.stage + ' ' + prefix + ' triggered!';
      }
    }
    if (data.meifile == null) {
      console.log('WARNING: no meifile specified for stage ' + data.stage);
      data.meifile = data.stage + '.mei';
    }
  }

  numflagvars = Math.ceil(numstages / BITS_PER_FLAGVAR);

  for (sfi = o = 1, ref11 = numflagvars; 1 <= ref11 ? o <= ref11 : o >= ref11; sfi = 1 <= ref11 ? ++o : --o) {
    ex.parameters.initstate['stageflags' + (sfi - 1)] = 0;
  }

  readmeiids = function(meifile) {
    var mei, meidir;
    meidir = configdir;
    if (config.meidir) {
      meidir = relpath(config.meidir, configdir);
    }
    meifile = relpath(meifile, meidir);
    mei = null;
    console.log('Processing mei file ' + meifile);
    try {
      mei = fs.readFileSync(meifile, 'utf8');
      if (mei.length > 0 && mei.charCodeAt(0) !== 60 && mei.charCodeAt(0) !== 65279) {
        mei = fs.readFileSync(meifile, 'ucs2');
        if (mei.length > 0 && mei.charCodeAt(0) !== 60 && mei.charCodeAt(0) !== 65279) {
          console.log('ERROR: file does not seem to be utf16 or utf8 XML: ' + meifile);
          return {};
        }
      }
    } catch (error) {
      e = error;
      console.log('ERROR: reading mei file ' + meifile + ': ' + e.message);
      return {};
    }
    return getCodeIds(mei);
  };

  for (r = q = 1; q <= 1000; r = ++q) {
    cell = sheet[cellid(0, r)];
    if (cell === void 0) {
      break;
    }
    if (cell.v == null) {
      continue;
    }
    data = stages[cell.v];
    meiids = readmeiids(data.meifile);
    control = {
      inputUrl: 'button:cue ' + data.stage,
      actions: [],
      poststate: {}
    };
    ex.controls.push(control);
    control.actions.push({
      url: '{{meldcollection}}',
      post: true,
      contentType: 'application/json',
      body: '{"oa:hasTarget":["{{meldannostate}}"], "oa:hasBody":[{"@type":"meldterm:CreateNextCollection", "resourcesToQueue":["{{meldmeiuri}}' + encodeURIComponent(data.meifile) + '"], "annotationsToQueue":[]}] }'
    });
    control.poststate.meldnextmeifile = JSON.stringify(data.meifile);
    control.poststate.cued = "true";
    control = {
      inputUrl: 'post:meld.load',
      actions: [],
      poststate: {}
    };
    control.precondition = 'params.meldmei==(meldmeiuri+' + (JSON.stringify(encodeURIComponent(data.meifile))) + ')';
    control.poststate.meldnextmeifile = 'null';
    ex.controls.push(control);
    set_stage(control, data);
    add_actions(control, 'auto_', data, true);
    control.poststate.meldmei = 'params.meldmei';
    control.poststate.meldannostate = 'params.meldannostate';
    control.poststate.meldcollection = 'params.meldcollection';
    if (data._index === 0) {
      control.actions.push({
        url: 'emit:vStart:mobileapp:{{performanceid}}:' + data.stage
      });
      for (sfi = s = 1, ref12 = numflagvars; 1 <= ref12 ? s <= ref12 : s >= ref12; sfi = 1 <= ref12 ? ++s : --s) {
        control.poststate['stageflags' + (sfi - 1)] = sfi === 0 ? 1 : 0;
      }
    } else if (data._index === (numstages - 1)) {
      control.actions.push({
        url: 'emit:vStop:mobileapp:{{performanceid}}'
      });
    } else {
      control.actions.push({
        url: 'emit:vStageChange:mobileapp:{{performanceid}}:{{stage}}->' + data.stage
      });
    }
    codetitles = {};
    for (mi = t = 0, len3 = mcs.length; t < len3; mi = ++t) {
      mc = mcs[mi];
      if (!data[mc + 'name']) {
        continue;
      }
      marker = get_marker(ex, data[mc + 'name'], 'stage ' + data.stage + ' ' + mc + 'name');
      if (marker.precondition.length > 0) {
        console.log('ERROR: coding error: marker found with non-empty precondition: ' + marker.precondition);
      }
      marker.precondition = 'stage=="' + data.stage + '"';
      marker.precondition += ' && (stagecodeflags & ' + (1 << mi) + ')==0';
      marker.poststate.stagecodeflags = 'stagecodeflags | ' + (1 << mi);
      if (codetitles[marker.title] === void 0) {
        codetitles[marker.title] = [];
      } else {
        ref13 = codetitles[marker.title];
        for (u = 0, len4 = ref13.length; u < len4; u++) {
          ct = ref13[u];
          marker.precondition += ' && (stagecodeflags & ' + (1 << ct) + ')!=0';
        }
      }
      codetitles[marker.title].push(mi);
      add_actions(marker, mc, data);
      if ((data[mc] != null) && data[mc] !== '') {
        labels = String(data[mc]).split(',');
        fragments = [];
        for (x = 0, len5 = labels.length; x < len5; x++) {
          label = labels[x];
          if (label !== '') {
            if ((label.indexOf('#')) === 0) {
              fragments.push(label);
            } else {
              ids = meiids[label];
              if (ids == null) {
                console.log('Warning: could not find code "' + data[mc] + '" in meifile ' + data.meifile + ' (stage ' + data.stage + ' mc ' + mc + ')');
              } else {
                console.log('Code ' + data[mc] + ' -> ' + ids);
                for (y = 0, len6 = ids.length; y < len6; y++) {
                  id = ids[y];
                  fragments.push('#' + id);
                }
              }
            }
          }
        }
        for (z = 0, len7 = fragments.length; z < len7; z++) {
          fragment = fragments[z];
          marker.actions.push({
            url: '{{meldcollection}}',
            post: true,
            contentType: 'application/json',
            body: '{"oa:hasTarget":[{"@id":"{{meldmei}}' + fragment + '"}], "oa:hasBody":[{"@type":"meldterm:Emphasis"}] }'
          });
        }
      }
    }
    if (defaultprojection !== '' && (data['default_cue'] != null)) {
      control = {
        inputUrl: 'event:end:' + defaultprojection,
        actions: [],
        precondition: 'stage==' + (JSON.stringify(data.stage)) + ' && !cued',
        poststate: {}
      };
      ex.controls.push(control);
      add_actions(control, 'default_', data);
    }
  }

  errors = 0;

  for (stage in stages) {
    data = stages[stage];
    for (i1 = 0, len8 = prefixes.length; i1 < len8; i1++) {
      prefix = prefixes[i1];
      if ((data[prefix + 'cue'] != null) && (stages[data[prefix + 'cue']] == null)) {
        console.log('ERROR: stage ' + stage + ' ' + prefix + 'cue refers to unknown stage "' + data[prefix + 'cue'] + '"');
        errors++;
      }
    }
  }

  control = {
    inputUrl: 'button:clear flags',
    actions: [],
    poststate: {}
  };

  for (sfi = j1 = 1, ref14 = numflagvars; 1 <= ref14 ? j1 <= ref14 : j1 >= ref14; sfi = 1 <= ref14 ? ++j1 : --j1) {
    control.poststate['stageflags' + (sfi - 1)] = 0;
  }

  control.poststate.stagecodeflags = 0;

  control = {
    inputUrl: 'event:load',
    actions: [],
    poststate: {}
  };

  ex.controls.push(control);

  control.poststate.stage = '"_loaded"';

  ref15 = ['v.animate', 'v.mc', 'v.background', 'v.weather'];
  for (k1 = 0, len9 = ref15.length; k1 < len9; k1++) {
    channel = ref15[k1];
    if (!(channel === 'v.background' && (config.forcebackgroundurl != null))) {
      control.actions.push({
        channel: channel,
        url: ''
      });
    }
  }

  control = {
    inputUrl: 'button:next piece',
    actions: []
  };

  ex.controls.push(control);

  control.actions.push({
    url: '{{meldcollection}}',
    post: true,
    contentType: 'application/json',
    body: '{"oa:hasTarget":["{{meldannostate}}"], "oa:hasBody":[{"@type":"meldterm:NextPageOrPiece","forceNextPiece":true}] }'
  });

  control = {
    inputUrl: 'button:pedal',
    actions: []
  };

  ex.controls.push(control);

  control.actions.push({
    url: 'http://localhost:3000/input',
    post: true,
    contentType: 'application/x-www-form-urlencoded',
    body: 'name=pedal'
  });

  control = {
    inputUrl: 'button:back',
    actions: []
  };

  ex.controls.push(control);

  control.actions.push({
    url: '{{meldcollection}}',
    post: true,
    contentType: 'application/json',
    body: '{"oa:hasTarget":["{{meldannostate}}"], "oa:hasBody":[{"@type":"meldterm:PreviousPageOrPiece"}] }'
  });

  control = {
    inputUrl: 'button:Fake meld',
    actions: [],
    precondition: '!!meldnextmeifile'
  };

  ex.controls.push(control);

  control.actions.push({
    url: 'http://localhost:3000/input',
    post: true,
    contentType: 'application/x-www-form-urlencoded',
    body: 'name=meld.load&meldmei={{meldmeiuri}}{{encodeURIComponent(meldnextmeifile)}}&meldcollection=&meldannostate='
  });

  control = {
    inputUrl: 'post:pedal',
    actions: []
  };

  ex.controls.push(control);

  control.actions.push({
    url: '{{meldcollection}}',
    post: true,
    contentType: 'application/json',
    body: '{"oa:hasTarget":["{{meldannostate}}"], "oa:hasBody":[{"@type":"meldterm:NextPageOrPiece"}] }'
  });

  control = {
    inputUrl: 'post:pedal.back',
    actions: []
  };

  ex.controls.push(control);

  control.actions.push({
    url: '{{meldcollection}}',
    post: true,
    contentType: 'application/json',
    body: '{"oa:hasTarget":["{{meldannostate}}"], "oa:hasBody":[{"@type":"meldterm:PreviousPageOrPiece"}] }'
  });

  ref16 = ex.markers;
  for (l1 = 0, len10 = ref16.length; l1 < len10; l1++) {
    marker = ref16[l1];
    if (marker.precondition === '' && marker.actions.length === 0) {
      unused = true;
      ref17 = marker.poststate;
      for (k in ref17) {
        v = ref17[k];
        unused = false;
        break;
      }
      if (unused) {
        console.log('Note: disabling unused marker "' + marker.title + '"');
        marker.precondition = 'false';
      }
    }
  }

  console.log('write experience ' + exoutfile);

  fs.writeFileSync(exoutfile, JSON.stringify(ex, null, '  '), {
    encoding: 'utf8'
  });

  viewconfig = viewgen.get();

  console.log('write climbview file ' + viewoutfile);

  fs.writeFileSync(viewoutfile, JSON.stringify(viewconfig, null, '  '), {
    encoding: 'utf8'
  });

  console.log('done');

  return errors;

}).call(this);
