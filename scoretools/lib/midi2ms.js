// Generated by CoffeeScript 1.11.1
(function() {
  var event, file, fs, i, j, k, l, len, len1, len2, len3, microseconds, microsecondsPerBeat, midi, midiFileParser, midifilein, midifileout, output, outputBuffer, ref, ref1, ticksPerBeat, timeMicroseconds, track, writeMidi;

  if (process.argv.length !== 4) {
    console.error('Usage: node readmidi.js MIDIFILEIN MIDIFILEOUT');
    process.exit(-1);
  }

  midiFileParser = require('midi-file-parser');

  writeMidi = require('midi-file').writeMidi;

  fs = require('fs');

  midifilein = process.argv[2];

  midifileout = process.argv[3];

  console.log('read ' + midifilein);

  file = fs.readFileSync(midifilein, 'binary');

  midi = midiFileParser(file);

  ref = midi.tracks;
  for (i = 0, len = ref.length; i < len; i++) {
    track = ref[i];
    for (j = 0, len1 = track.length; j < len1; j++) {
      event = track[j];
      event.type = event.subtype;
      delete event.subtype;
    }
  }

  if (!midi.header.ticksPerBeat) {
    console.error('File is not beat-based: ' + (JSON.stringify(midi.header)));
    process.exit(-2);
  }

  ticksPerBeat = midi.header.ticksPerBeat;

  microsecondsPerBeat = 500000;

  timeMicroseconds = 0;

  delete midi.header.ticksPerBeat;

  midi.header.ticksPerFrame = 25;

  midi.header.framesPerSecond = 40;

  ref1 = midi.tracks;
  for (k = 0, len2 = ref1.length; k < len2; k++) {
    track = ref1[k];
    for (l = 0, len3 = track.length; l < len3; l++) {
      event = track[l];
      if (event.deltaTime != null) {
        microseconds = Math.round(microsecondsPerBeat * event.deltaTime / ticksPerBeat);
        event.deltaTime = Math.floor((microseconds + (timeMicroseconds % 1000)) / 1000);
        timeMicroseconds += microseconds;
      } else {
        console.log(event);
      }
      if (event.type === 'setTempo') {
        microsecondsPerBeat = event.microsecondsPerBeat;
        console.log('at ' + (timeMicroseconds / 1000000) + ' tempo now ' + microsecondsPerBeat + 'us/beat = ' + (60000000 / microsecondsPerBeat) + ' bpm');
      }
    }
  }

  console.log('ok');

  output = writeMidi(midi);

  outputBuffer = new Buffer(output);

  console.log('writing ' + midifileout);

  fs.writeFileSync(midifileout, outputBuffer);

  console.log('done');

}).call(this);
