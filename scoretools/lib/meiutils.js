// Generated by CoffeeScript 1.11.1
(function() {
  var DOMParser, ELEMENT_NODE, Node, TEXT_NODE, getCodeIds, getattributemap, getlabelledids, getparentoftype, gettext, select, xpath;

  DOMParser = (require('xmldom')).DOMParser;

  Node = (require('xmldom')).Node;

  xpath = require('xpath');

  select = xpath.useNamespaces({
    "mei": "http://www.music-encoding.org/ns/mei"
  });

  TEXT_NODE = 3;

  ELEMENT_NODE = 1;

  gettext = function(node) {
    var child, i, len, ref, results, text;
    text = '';
    ref = node.childNodes;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      if (child.nodeType === TEXT_NODE) {
        results.push(text += child.nodeValue);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  getparentoftype = function(node, type) {
    while (node != null) {
      if (node.nodeType === ELEMENT_NODE && node.nodeName === type) {
        return node;
      }
      node = node.parentNode;
    }
    return null;
  };

  getattributemap = function(node) {
    var att, atts, i, len, ref;
    atts = {};
    ref = node.attributes;
    for (i = 0, len = ref.length; i < len; i++) {
      att = ref[i];
      atts[att.name] = att.value;
    }
    return atts;
  };

  getlabelledids = function(doc) {
    var atts, i, j, labels, len, len1, measure, measurenodes, n, text, textnodes;
    labels = {};
    textnodes = select("//mei:dir/mei:rend", doc);
    for (i = 0, len = textnodes.length; i < len; i++) {
      n = textnodes[i];
      text = gettext(n);
      measure = getparentoftype(n, 'measure');
      if (measure != null) {
        atts = getattributemap(measure);
        labels[text] = [atts['xml:id']];
      } else {
        console.log('Warning: text with no parent measure: ' + text);
      }
    }
    measurenodes = select("//mei:measure", doc);
    for (j = 0, len1 = measurenodes.length; j < len1; j++) {
      measure = measurenodes[j];
      atts = getattributemap(measure);
      if (atts['n'] != null) {
        if (labels[atts['n']] != null) {
          labels[atts['n']].push(atts['xml:id']);
        } else {
          labels[atts['n']] = [atts['xml:id']];
        }
      }
    }
    return labels;
  };

  getCodeIds = function(meitext) {
    var doc, labels;
    doc = new DOMParser().parseFromString(meitext, 'text/xml');
    labels = getlabelledids(doc);
    return labels;
  };

  module.exports.getCodeIds = getCodeIds;

}).call(this);
